@typeparam T
@inherits OrderedListAsyncBase<T>

<OrderedList Collapsed="Collapsed">
    @foreach (var item in Items)
    {
        <ListItemAsync Context="ChildCollapsed" Item="item" Level="Level" HasChildren="HasChildren" ChildLoading="@ChildLoading" CollapseHasChanged="(c) => CollapsedChanged(c)">
            @if (!ChildCollapsed)
            {
                <OrderedListByGetChildrenAsync Level="Level + 1"
                                               Collapsed="ChildCollapsed"
                                               Parental="item" GetChildrenAsync="GetChildrenAsync" />
            }
        </ListItemAsync>
    }
</OrderedList>

@code {
    [Parameter] public T Parental { get; set; }
    [Parameter] public Func<T, Task<List<T>>> GetChildrenAsync { get; set; }

    List<T> Items { get; set; } = new List<T>();
    bool HasChildren { get; set; } = false;
    bool ChildLoaded { get; set; } = false;
    bool ChildLoading { get; set; } = false;

    void CollapsedChanged(bool collapsed)
    {
        if (collapsed) ChildLoaded = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ChildLoaded) return;
        Items = SortBy(FilterBy(await GetChildrenAsync(Parental))).ToList();
        HasChildren = await TreeViewAsync.HasChildrenAsync(Parental);
        ChildLoaded = true;
    }
}