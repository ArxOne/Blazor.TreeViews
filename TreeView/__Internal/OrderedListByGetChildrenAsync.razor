@typeparam T
@inherits OrderedListAsyncBase<T>

<OrderedList Collapsed="Collapsed">
    @foreach (var item in Items)
    {
        <ListItem Context="ChildCollapsed" Item="item" Level="Level" LoadingChild="LoadingChild" HasChildren="HasChildren" CollapseHasChanged="(c) => CollapsedChanged(c)">
            @if (!ChildCollapsed)
            {
                <OrderedListByGetChildrenAsync Level="Level + 1"
                                               Collapsed="ChildCollapsed"
                                               Parental="item" GetChildrenAsync="GetChildrenAsync" Loading="(loading) => {if (!loading) LoadingChild = false;}"/>
            }
        </ListItem>
    }
</OrderedList>

@code {
    [Parameter]
    public T Parental { get; set; }

    [Parameter]
    public Func<T, Task<List<T>>> GetChildrenAsync { get; set; }

    [Parameter]
    public EventCallback<bool> Loading { get; set; }

    List<T> Items { get; set; } = new List<T>();
    bool HasChildren { get; set; } = false;
    bool LoadingChild { get; set; } = false;

    void CollapsedChanged(bool collapsed)
    {
        if (!collapsed) LoadingChild = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loading.InvokeAsync(true);
        Items = SortBy(FilterBy(await GetChildrenAsync(Parental))).ToList();
        HasChildren = await TreeViewAsync.HasChildrenAsync(Parental);
        await Loading.InvokeAsync(false);
    }

}