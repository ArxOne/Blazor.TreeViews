@typeparam T
@using Excubo.Blazor.TreeViews.__Internal

@code {
    [Parameter]
    public Func<IEnumerable<T>, IEnumerable<T>> SortBy { get; set; } = (e) => e;

    /// <summary>
    /// Controls which items are ignored. When an item is filtered, it and all its children are not displayed.
    /// </summary>
    [Parameter]
    public Func<IEnumerable<T>, IEnumerable<T>> FilterBy { get; set; } = (e) => e;

    /// <summary>
    /// When set to true, checkboxes are displayed.
    /// </summary>
    [Parameter]
    public bool AllowSelection { get; set; }

    /// <summary>
    /// The items that should have a checked checkbox next to them. Requires <see cref="AllowSelection"/> to be set to true.
    /// </summary>
    [Parameter]
    public List<T> SelectedItems { get; set; } = new List<T>();

    /// <summary>
    /// Callback for when the selection of items changes by user interaction. Requires <see cref="AllowSelection"/> to be set to true.
    /// </summary>
    [Parameter]
    public EventCallback<List<T>> SelectedItemsChanged { get; set; }

    /// <summary>
    /// Controls the display of the checkbox. Requires <see cref="AllowSelection"/> to be set to true. Defaults to a pure HTML checkbox.
    /// </summary>
    [Parameter]
    public CheckboxFragment CheckboxTemplate { get; set; } = (value, value_changed) => @<DefaultCheckbox Value="value" ValueChanged="value_changed"/>;

    /// <summary>
    /// Controls how each item is displayed. Defaults to printing the item itself.
    /// </summary>
    [Parameter]
    public RenderFragment<ItemContent<T>> ItemTemplate { get; set; } = (ItemContent<T> value) => @<text>@value.Item</text>;
    /// <summary>
    /// When set to true, all items are initially collapsed.
    /// </summary>
    [Parameter] public bool InitiallyCollapsed { get; set; }

    internal void UpdateSelection(T item, bool? selected)
    {
        if (selected == null)
        {
            return;
        }
        if (SelectedItems == null)
        {
            SelectedItems = new List<T>();
        }
        if (selected == false)
        {
            SelectedItems.Remove(item);
            SelectedItemsChanged.InvokeAsync(SelectedItems);
        }
        else if (selected == true && !SelectedItems.Contains(item))
        {
            SelectedItems.Add(item);
            SelectedItemsChanged.InvokeAsync(SelectedItems);
        }
    }

}